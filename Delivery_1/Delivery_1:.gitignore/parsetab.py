
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'colon semicolon comma curlybraces_open curlybraces_close parenthesis_open parenthesis_close squarebracket_open squarebracket_close op_assign op_less op_less_equal op_greater op_greater_equal op_equal op_not_equal op_addition op_subtraction op_multiplication op_division cst_whole cst_decimal cst_words cst_boolean id op_and do op_or return_statement words op_negation whole decimal of_type else print block_returns boolean call receives variable input starting until block if\n\tPROGRAM : PROGRAM_AUX\n\t\n\tPROGRAM_AUX : BLOCK\n\t\t\t\t  | PROGRAM_AUX BLOCK\n\t\n\tBLOCK : BLOCK_AUX block id RECEIVES_AUX RETURNS_AUX BLOCK_BODY\n\t\n\tBLOCK_AUX : starting \n\t\t\t\t| empty\n\t\n\tRECEIVES_AUX : receives colon id of_type TYPE RECEIVES_AUX1\n\t\t\t\t   | empty\n\t\n\tRECEIVES_AUX1 : comma id of_type TYPE RECEIVES_AUX1\n\t\t\t\t\t| empty\n\t\n\tRETURNS_AUX : block_returns TYPE \n\t\t\t\t  | empty\n\t\n\tBLOCK_BODY : curlybraces_open BLOCK_BODY_AUX curlybraces_close\n\t\n\tBLOCK_BODY_AUX1 : STATEMENT BLOCK_BODY_AUX1\n\t\t\t\t\t | empty\n\t\n\tBLOCK_BODY_AUX : DECLARATIONS BLOCK_BODY_AUX1\n\t\t\t\t\t | BLOCK_BODY_AUX1\n\t\n\tTYPE : whole\n\t\t   | decimal\n\t\t   | words\n\t\t   | boolean\n\t\n\tBODY : curlybraces_open BODY_AUX curlybraces_close\n\t\n\tBODY_AUX : STATEMENT BODY_AUX\n\t\t\t   | empty\n\t\n\tCONDITION : if parenthesis_open EXPRESSION parenthesis_close BODY CONDITION_AUX\n\t\n\tCONDITION_AUX : else BODY\n\t\t\t\t\t| empty\n\t\n\tCONSTANT : id CONSTANT_AUX\n\t\t\t   | cst_whole\n\t   \t\t   | cst_decimal\n\t\t \t   | cst_words\n\t\t\t   | cst_boolean\n\t\n\tCONSTANT_AUX : squarebracket_open EXPRESSION squarebracket_close\n\t\t\t\t   | parenthesis_open EXPRESSION CONSTANT_AUX1 parenthesis_close\n\t\t\t\t   | empty\n\t\n\tCONSTANT_AUX1 : comma EXPRESSION CONSTANT_AUX1\n\t\t\t\t\t| empty\n\t\n\tDECLARATIONS : VAR_DECLARATION\n\t\t\t\t   | LIST_DECLARATION\n\t\n\tVAR_DECLARATION : variable id VAR_DECLARATION_AUX of_type TYPE semicolon\n\t\n\tVAR_DECLARATION_AUX : comma id VAR_DECLARATION_AUX\n\t\t\t\t\t\t  | empty\n\t\n\tLIST_DECLARATION : variable id squarebracket_open EXPRESSION squarebracket_close of_type TYPE semicolon\n\t\n\tEXPRESSION : EXPRESSION_AUX EXP EXPRESSION_AUX1\n\t\n\tEXPRESSION_AUX : op_negation\n\t\t\t\t\t | empty\n\t\n\tEXPRESSION_AUX1 : op_and EXPRESSION_AUX EXP\n\t\t\t\t\t | op_or EXPRESSION_AUX EXP\n\t\n\tEXP : ITEM EXP_AUX\n\t\n\tEXP_AUX : op_less ITEM\n\t\t\t  | op_less_equal ITEM\n\t\t\t  | op_greater ITEM\n\t\t\t  | op_greater_equal ITEM\n\t\t\t  | op_equal ITEM\n\t\t\t  | op_not_equal ITEM\n\t\t\t  | empty\n\t\n\tFACTOR : parenthesis_open EXPRESSION parenthesis_close\n\t\t\t | FACTOR_AUX\n\t\n\tFACTOR_AUX : op_addition CONSTANT\n\t\t\t\t | op_subtraction CONSTANT\n\t\t\t\t | CONSTANT\n\t\n\tITEM : TERM ITEM_AUX\n\t\n\tITEM_AUX : op_addition ITEM\n\t\t\t   | op_subtraction ITEM\n\t\t\t   | empty\n\t\n\tTERM : FACTOR TERM_AUX\n\t\n\tTERM_AUX : op_multiplication TERM\n\t\t\t   | op_division TERM\n\t\t\t   | empty\n\t\n\tSTATEMENT : ASSIGN\n\t\t\t\t| CONDITION\n\t\t\t\t| READ\n\t\t\t\t| WRITE\n\t\t\t\t| LOOP\n\t\t\t\t| RETURN\n\t\t\t\t| CALL\n\t\n\tCALL : call id parenthesis_open EXPRESSION CALL_AUX parenthesis_close semicolon\n\t\n\tCALL_AUX : comma EXPRESSION CALL_AUX\n\t\t\t   | empty\n\t\n\tLOOP : do BODY until parenthesis_open EXPRESSION parenthesis_close \n\t\n\tASSIGN : id ASSIGN_AUX op_assign EXPRESSION semicolon\n\t\n\tASSIGN_AUX : squarebracket_open EXPRESSION squarebracket_close\n\t\n\tRETURN : return_statement EXPRESSION semicolon\n\t\n\tREAD : input parenthesis_open id READ_AUX parenthesis_close semicolon\n\t\n\tREAD_AUX : squarebracket_open EXPRESSION squarebracket_close\n\t\t\t   | empty\n\t\n\tWRITE : print parenthesis_open EXPRESSION WRITE_AUX parenthesis_close semicolon\n\t\n\tWRITE_AUX : comma EXPRESSION WRITE_AUX\n\t\t\t\t| empty\n\tempty :'
    
_lr_action_items = {'semicolon':([20,21,22,23,55,68,69,71,72,73,75,77,78,80,81,97,100,104,105,109,110,112,113,120,121,122,125,146,147,148,149,150,151,152,153,154,155,156,160,163,167,172,173,174,178,190,193,],[-19,-21,-20,-18,82,-61,-30,-90,-31,-90,-58,-32,-29,-90,-90,140,-44,-28,-35,-62,-65,-59,-60,-49,-56,-66,-69,-63,-64,-57,-51,-55,-52,-53,-54,-50,-68,-67,180,183,186,-48,-47,-33,191,-34,196,]),'op_not_equal':([68,69,71,72,73,75,77,78,80,81,104,105,109,110,112,113,122,125,146,147,148,155,156,174,190,],[-61,-30,-90,-31,-90,-58,-32,-29,115,-90,-28,-35,-62,-65,-59,-60,-66,-69,-63,-64,-57,-68,-67,-33,-34,]),'op_multiplication':([68,69,71,72,75,77,78,81,104,105,112,113,148,174,190,],[-61,-30,-90,-31,-58,-32,-29,124,-28,-35,-59,-60,-57,-33,-34,]),'boolean':([15,47,138,168,185,],[21,21,21,21,21,]),'comma':([20,21,22,23,63,64,68,69,71,72,73,75,77,78,80,81,84,100,104,105,109,110,112,113,120,121,122,125,126,136,145,146,147,148,149,150,151,152,153,154,155,156,161,172,173,174,179,187,189,190,],[-19,-21,-20,-18,90,94,-61,-30,-90,-31,-90,-58,-32,-29,-90,-90,128,-44,-28,-35,-62,-65,-59,-60,-49,-56,-66,-69,158,90,175,-63,-64,-57,-51,-55,-52,-53,-54,-50,-68,-67,128,-48,-47,-33,158,94,175,-34,]),'cst_decimal':([32,50,51,53,54,56,58,65,74,76,79,83,91,101,102,103,106,107,108,114,115,116,117,118,119,123,124,128,130,133,142,143,158,175,],[-90,-90,-90,-45,69,-46,-90,-90,-90,69,69,-90,-90,-90,-90,-90,-90,69,69,69,69,69,69,69,69,69,69,-90,-90,-90,69,69,-90,-90,]),'op_less':([68,69,71,72,73,75,77,78,80,81,104,105,109,110,112,113,122,125,146,147,148,155,156,174,190,],[-61,-30,-90,-31,-90,-58,-32,-29,119,-90,-28,-35,-62,-65,-59,-60,-66,-69,-63,-64,-57,-68,-67,-33,-34,]),'id':([7,16,18,25,26,27,30,31,32,33,36,37,40,41,43,44,46,50,51,53,54,56,58,59,62,65,74,76,79,82,83,87,90,91,94,101,102,103,106,107,108,114,115,116,117,118,119,123,124,128,130,133,135,140,141,142,143,158,170,171,175,180,183,184,186,188,191,196,],[9,24,28,-75,28,-72,-39,28,-90,57,-70,-71,-73,63,-38,-76,-74,-90,-90,-45,71,-46,-90,85,28,-90,-90,71,71,-83,-90,28,136,-90,139,-90,-90,-90,-90,71,71,71,71,71,71,71,71,71,71,-90,-90,-90,-22,-81,-90,71,71,-90,-25,-27,-90,-87,-84,-80,-40,-26,-77,-43,]),'if':([18,25,26,27,30,31,36,37,40,43,44,46,62,82,87,135,140,141,170,171,180,183,184,186,188,191,196,],[29,-75,29,-72,-39,29,-70,-71,-73,-38,-76,-74,29,-83,29,-22,-81,-90,-25,-27,-87,-84,-80,-40,-26,-77,-43,]),'op_less_equal':([68,69,71,72,73,75,77,78,80,81,104,105,109,110,112,113,122,125,146,147,148,155,156,174,190,],[-61,-30,-90,-31,-90,-58,-32,-29,114,-90,-28,-35,-62,-65,-59,-60,-66,-69,-63,-64,-57,-68,-67,-33,-34,]),'op_division':([68,69,71,72,75,77,78,81,104,105,112,113,148,174,190,],[-61,-30,-90,-31,-58,-32,-29,123,-28,-35,-59,-60,-57,-33,-34,]),'return_statement':([18,25,26,27,30,31,36,37,40,43,44,46,62,82,87,135,140,141,170,171,180,183,184,186,188,191,196,],[32,-75,32,-72,-39,32,-70,-71,-73,-38,-76,-74,32,-83,32,-22,-81,-90,-25,-27,-87,-84,-80,-40,-26,-77,-43,]),'op_or':([68,69,70,71,72,73,75,77,78,80,81,104,105,109,110,112,113,120,121,122,125,146,147,148,149,150,151,152,153,154,155,156,174,190,],[-61,-30,101,-90,-31,-90,-58,-32,-29,-90,-90,-28,-35,-62,-65,-59,-60,-49,-56,-66,-69,-63,-64,-57,-51,-55,-52,-53,-54,-50,-68,-67,-33,-34,]),'op_greater_equal':([68,69,71,72,73,75,77,78,80,81,104,105,109,110,112,113,122,125,146,147,148,155,156,174,190,],[-61,-30,-90,-31,-90,-58,-32,-29,117,-90,-28,-35,-62,-65,-59,-60,-66,-69,-63,-64,-57,-68,-67,-33,-34,]),'call':([18,25,26,27,30,31,36,37,40,43,44,46,62,82,87,135,140,141,170,171,180,183,184,186,188,191,196,],[33,-75,33,-72,-39,33,-70,-71,-73,-38,-76,-74,33,-83,33,-22,-81,-90,-25,-27,-87,-84,-80,-40,-26,-77,-43,]),'curlybraces_close':([18,25,26,27,30,31,36,37,38,40,42,43,44,45,46,48,52,62,82,87,88,89,134,135,140,141,170,171,180,183,184,186,188,191,196,],[-90,-75,-90,-72,-39,-90,-70,-71,60,-73,-17,-38,-76,-15,-74,-14,-16,-90,-83,-90,135,-24,-23,-22,-81,-90,-25,-27,-87,-84,-80,-40,-26,-77,-43,]),'print':([18,25,26,27,30,31,36,37,40,43,44,46,62,82,87,135,140,141,170,171,180,183,184,186,188,191,196,],[34,-75,34,-72,-39,34,-70,-71,-73,-38,-76,-74,34,-83,34,-22,-81,-90,-25,-27,-87,-84,-80,-40,-26,-77,-43,]),'input':([18,25,26,27,30,31,36,37,40,43,44,46,62,82,87,135,140,141,170,171,180,183,184,186,188,191,196,],[35,-75,35,-72,-39,35,-70,-71,-73,-38,-76,-74,35,-83,35,-22,-81,-90,-25,-27,-87,-84,-80,-40,-26,-77,-43,]),'parenthesis_open':([29,32,34,35,50,51,53,54,56,57,58,65,71,74,83,86,91,101,102,103,106,107,108,114,115,116,117,118,119,123,124,128,130,133,142,143,158,175,],[51,-90,58,59,-90,-90,-45,74,-46,83,-90,-90,106,-90,-90,133,-90,-90,-90,-90,-90,74,74,74,74,74,74,74,74,74,74,-90,-90,-90,74,74,-90,-90,]),'op_assign':([49,98,],[65,-82,]),'$end':([3,4,5,8,17,60,],[0,-1,-2,-3,-4,-13,]),'do':([18,25,26,27,30,31,36,37,40,43,44,46,62,82,87,135,140,141,170,171,180,183,184,186,188,191,196,],[39,-75,39,-72,-39,39,-70,-71,-73,-38,-76,-74,39,-83,39,-22,-81,-90,-25,-27,-87,-84,-80,-40,-26,-77,-43,]),'op_addition':([32,50,51,53,54,56,58,65,68,69,71,72,73,74,75,77,78,81,83,91,101,102,103,104,105,106,107,108,112,113,114,115,116,117,118,119,122,123,124,125,128,130,133,142,143,148,155,156,158,174,175,190,],[-90,-90,-90,-45,76,-46,-90,-90,-61,-30,-90,-31,107,-90,-58,-32,-29,-90,-90,-90,-90,-90,-90,-28,-35,-90,76,76,-59,-60,76,76,76,76,76,76,-66,76,76,-69,-90,-90,-90,76,76,-57,-68,-67,-90,-33,-90,-34,]),'cst_words':([32,50,51,53,54,56,58,65,74,76,79,83,91,101,102,103,106,107,108,114,115,116,117,118,119,123,124,128,130,133,142,143,158,175,],[-90,-90,-90,-45,72,-46,-90,-90,-90,72,72,-90,-90,-90,-90,-90,-90,72,72,72,72,72,72,72,72,72,72,-90,-90,-90,72,72,-90,-90,]),'squarebracket_open':([28,63,71,85,],[50,91,103,130,]),'op_and':([68,69,70,71,72,73,75,77,78,80,81,104,105,109,110,112,113,120,121,122,125,146,147,148,149,150,151,152,153,154,155,156,174,190,],[-61,-30,102,-90,-31,-90,-58,-32,-29,-90,-90,-28,-35,-62,-65,-59,-60,-49,-56,-66,-69,-63,-64,-57,-51,-55,-52,-53,-54,-50,-68,-67,-33,-34,]),'else':([135,141,],[-22,169,]),'squarebracket_close':([66,68,69,71,72,73,75,77,78,80,81,100,104,105,109,110,112,113,120,121,122,125,137,144,146,147,148,149,150,151,152,153,154,155,156,162,172,173,174,190,],[98,-61,-30,-90,-31,-90,-58,-32,-29,-90,-90,-44,-28,-35,-62,-65,-59,-60,-49,-56,-66,-69,166,174,-63,-64,-57,-51,-55,-52,-53,-54,-50,-68,-67,182,-48,-47,-33,-34,]),'parenthesis_close':([67,68,69,71,72,73,75,77,78,80,81,84,85,100,104,105,109,110,111,112,113,120,121,122,125,126,127,129,131,132,145,146,147,148,149,150,151,152,153,154,155,156,157,159,161,164,172,173,174,176,177,179,181,182,189,190,192,195,],[99,-61,-30,-90,-31,-90,-58,-32,-29,-90,-90,-90,-90,-44,-28,-35,-62,-65,148,-59,-60,-49,-56,-66,-69,-90,160,-89,-86,163,-90,-63,-64,-57,-51,-55,-52,-53,-54,-50,-68,-67,178,-79,-90,184,-48,-47,-33,190,-37,-90,-88,-85,-90,-34,-78,-36,]),'words':([15,47,138,168,185,],[22,22,22,22,22,]),'variable':([18,],[41,]),'of_type':([24,63,92,93,136,139,165,166,],[47,-90,138,-42,-90,168,-41,185,]),'cst_boolean':([32,50,51,53,54,56,58,65,74,76,79,83,91,101,102,103,106,107,108,114,115,116,117,118,119,123,124,128,130,133,142,143,158,175,],[-90,-90,-90,-45,77,-46,-90,-90,-90,77,77,-90,-90,-90,-90,-90,-90,77,77,77,77,77,77,77,77,77,77,-90,-90,-90,77,77,-90,-90,]),'cst_whole':([32,50,51,53,54,56,58,65,74,76,79,83,91,101,102,103,106,107,108,114,115,116,117,118,119,123,124,128,130,133,142,143,158,175,],[-90,-90,-90,-45,78,-46,-90,-90,-90,78,78,-90,-90,-90,-90,-90,-90,78,78,78,78,78,78,78,78,78,78,-90,-90,-90,78,78,-90,-90,]),'op_negation':([32,50,51,58,65,74,83,91,101,102,103,106,128,130,133,158,175,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'op_subtraction':([32,50,51,53,54,56,58,65,68,69,71,72,73,74,75,77,78,81,83,91,101,102,103,104,105,106,107,108,112,113,114,115,116,117,118,119,122,123,124,125,128,130,133,142,143,148,155,156,158,174,175,190,],[-90,-90,-90,-45,79,-46,-90,-90,-61,-30,-90,-31,108,-90,-58,-32,-29,-90,-90,-90,-90,-90,-90,-28,-35,-90,79,79,-59,-60,79,79,79,79,79,79,-66,79,79,-69,-90,-90,-90,79,79,-57,-68,-67,-90,-33,-90,-34,]),'starting':([0,4,5,8,17,60,],[6,6,-2,-3,-4,-13,]),'decimal':([15,47,138,168,185,],[20,20,20,20,20,]),'until':([61,135,],[86,-22,]),'op_greater':([68,69,71,72,73,75,77,78,80,81,104,105,109,110,112,113,122,125,146,147,148,155,156,174,190,],[-61,-30,-90,-31,-90,-58,-32,-29,116,-90,-28,-35,-62,-65,-59,-60,-66,-69,-63,-64,-57,-68,-67,-33,-34,]),'curlybraces_open':([9,10,11,13,14,19,20,21,22,23,39,64,95,96,99,169,187,194,],[-90,-90,-8,18,-12,-11,-19,-21,-20,-18,62,-90,-7,-10,62,62,-90,-9,]),'receives':([9,],[12,]),'op_equal':([68,69,71,72,73,75,77,78,80,81,104,105,109,110,112,113,122,125,146,147,148,155,156,174,190,],[-61,-30,-90,-31,-90,-58,-32,-29,118,-90,-28,-35,-62,-65,-59,-60,-66,-69,-63,-64,-57,-68,-67,-33,-34,]),'colon':([12,],[16,]),'block_returns':([9,10,11,20,21,22,23,64,95,96,187,194,],[-90,15,-8,-19,-21,-20,-18,-90,-7,-10,-90,-9,]),'whole':([15,47,138,168,185,],[23,23,23,23,23,]),'block':([0,1,2,4,5,6,8,17,60,],[-90,-6,7,-90,-2,-5,-3,-4,-13,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'RETURN':([18,26,31,62,87,],[25,25,25,25,25,]),'VAR_DECLARATION_AUX':([63,136,],[92,165,]),'READ':([18,26,31,62,87,],[27,27,27,27,27,]),'RECEIVES_AUX1':([64,187,],[95,194,]),'ASSIGN_AUX':([28,],[49,]),'BLOCK_BODY_AUX1':([18,26,31,],[42,48,52,]),'ITEM_AUX':([73,],[109,]),'PROGRAM':([0,],[3,]),'PROGRAM_AUX':([0,],[4,]),'EXP':([54,142,143,],[70,172,173,]),'CONSTANT':([54,76,79,107,108,114,115,116,117,118,119,123,124,142,143,],[68,112,113,68,68,68,68,68,68,68,68,68,68,68,68,]),'CONSTANT_AUX':([71,],[104,]),'BLOCK':([0,4,],[5,8,]),'READ_AUX':([85,],[132,]),'LIST_DECLARATION':([18,],[30,]),'TERM':([54,107,108,114,115,116,117,118,119,123,124,142,143,],[73,73,73,73,73,73,73,73,73,155,156,73,73,]),'RETURNS_AUX':([10,],[13,]),'DECLARATIONS':([18,],[31,]),'EXPRESSION_AUX':([32,50,51,58,65,74,83,91,101,102,103,106,128,130,133,158,175,],[54,54,54,54,54,54,54,54,142,143,54,54,54,54,54,54,54,]),'EXPRESSION_AUX1':([70,],[100,]),'CONSTANT_AUX1':([145,189,],[176,195,]),'EXPRESSION':([32,50,51,58,65,74,83,91,103,106,128,130,133,158,175,],[55,66,67,84,97,111,126,137,144,145,161,162,164,179,189,]),'ASSIGN':([18,26,31,62,87,],[36,36,36,36,36,]),'CONDITION':([18,26,31,62,87,],[37,37,37,37,37,]),'BLOCK_BODY_AUX':([18,],[38,]),'BODY':([39,99,169,],[61,141,188,]),'TERM_AUX':([81,],[122,]),'RECEIVES_AUX':([9,],[10,]),'WRITE':([18,26,31,62,87,],[40,40,40,40,40,]),'CALL_AUX':([126,179,],[157,192,]),'STATEMENT':([18,26,31,62,87,],[26,26,26,87,87,]),'CONDITION_AUX':([141,],[170,]),'ITEM':([54,107,108,114,115,116,117,118,119,142,143,],[80,146,147,149,150,151,152,153,154,80,80,]),'BODY_AUX':([62,87,],[88,134,]),'FACTOR_AUX':([54,107,108,114,115,116,117,118,119,123,124,142,143,],[75,75,75,75,75,75,75,75,75,75,75,75,75,]),'BLOCK_AUX':([0,4,],[2,2,]),'EXP_AUX':([80,],[120,]),'BLOCK_BODY':([13,],[17,]),'VAR_DECLARATION':([18,],[43,]),'WRITE_AUX':([84,161,],[127,181,]),'CALL':([18,26,31,62,87,],[44,44,44,44,44,]),'empty':([0,4,9,10,18,26,31,32,50,51,58,62,63,64,65,71,73,74,80,81,83,84,85,87,91,101,102,103,106,126,128,130,133,136,141,145,158,161,175,179,187,189,],[1,1,11,14,45,45,45,56,56,56,56,89,93,96,56,105,110,56,121,125,56,129,131,89,56,56,56,56,56,159,56,56,56,93,171,177,56,129,56,159,96,177,]),'FACTOR':([54,107,108,114,115,116,117,118,119,123,124,142,143,],[81,81,81,81,81,81,81,81,81,81,81,81,81,]),'TYPE':([15,47,138,168,185,],[19,64,167,187,193,]),'LOOP':([18,26,31,62,87,],[46,46,46,46,46,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> PROGRAM","S'",1,None,None,None),
  ('PROGRAM -> PROGRAM_AUX','PROGRAM',1,'p_PROGRAM','parser.py',8),
  ('PROGRAM_AUX -> BLOCK','PROGRAM_AUX',1,'p_PROGRAM_AUX','parser.py',14),
  ('PROGRAM_AUX -> PROGRAM_AUX BLOCK','PROGRAM_AUX',2,'p_PROGRAM_AUX','parser.py',15),
  ('BLOCK -> BLOCK_AUX block id RECEIVES_AUX RETURNS_AUX BLOCK_BODY','BLOCK',6,'p_BLOCK','parser.py',20),
  ('BLOCK_AUX -> starting','BLOCK_AUX',1,'p_BLOCK_AUX','parser.py',25),
  ('BLOCK_AUX -> empty','BLOCK_AUX',1,'p_BLOCK_AUX','parser.py',26),
  ('RECEIVES_AUX -> receives colon id of_type TYPE RECEIVES_AUX1','RECEIVES_AUX',6,'p_RECEIVES_AUX','parser.py',31),
  ('RECEIVES_AUX -> empty','RECEIVES_AUX',1,'p_RECEIVES_AUX','parser.py',32),
  ('RECEIVES_AUX1 -> comma id of_type TYPE RECEIVES_AUX1','RECEIVES_AUX1',5,'p_RECEIVES_AUX1','parser.py',37),
  ('RECEIVES_AUX1 -> empty','RECEIVES_AUX1',1,'p_RECEIVES_AUX1','parser.py',38),
  ('RETURNS_AUX -> block_returns TYPE','RETURNS_AUX',2,'p_RETURNS_AUX','parser.py',43),
  ('RETURNS_AUX -> empty','RETURNS_AUX',1,'p_RETURNS_AUX','parser.py',44),
  ('BLOCK_BODY -> curlybraces_open BLOCK_BODY_AUX curlybraces_close','BLOCK_BODY',3,'p_BLOCK_BODY','parser.py',49),
  ('BLOCK_BODY_AUX1 -> STATEMENT BLOCK_BODY_AUX1','BLOCK_BODY_AUX1',2,'p_BLOCK_BODY_AUX1','parser.py',54),
  ('BLOCK_BODY_AUX1 -> empty','BLOCK_BODY_AUX1',1,'p_BLOCK_BODY_AUX1','parser.py',55),
  ('BLOCK_BODY_AUX -> DECLARATIONS BLOCK_BODY_AUX1','BLOCK_BODY_AUX',2,'p_BLOCK_BODY_AUX','parser.py',60),
  ('BLOCK_BODY_AUX -> BLOCK_BODY_AUX1','BLOCK_BODY_AUX',1,'p_BLOCK_BODY_AUX','parser.py',61),
  ('TYPE -> whole','TYPE',1,'p_TYPE','parser.py',66),
  ('TYPE -> decimal','TYPE',1,'p_TYPE','parser.py',67),
  ('TYPE -> words','TYPE',1,'p_TYPE','parser.py',68),
  ('TYPE -> boolean','TYPE',1,'p_TYPE','parser.py',69),
  ('BODY -> curlybraces_open BODY_AUX curlybraces_close','BODY',3,'p_BODY','parser.py',74),
  ('BODY_AUX -> STATEMENT BODY_AUX','BODY_AUX',2,'p_BODY_AUX','parser.py',79),
  ('BODY_AUX -> empty','BODY_AUX',1,'p_BODY_AUX','parser.py',80),
  ('CONDITION -> if parenthesis_open EXPRESSION parenthesis_close BODY CONDITION_AUX','CONDITION',6,'p_CONDITION','parser.py',85),
  ('CONDITION_AUX -> else BODY','CONDITION_AUX',2,'p_CONDITION_AUX','parser.py',90),
  ('CONDITION_AUX -> empty','CONDITION_AUX',1,'p_CONDITION_AUX','parser.py',91),
  ('CONSTANT -> id CONSTANT_AUX','CONSTANT',2,'p_CONSTANT','parser.py',96),
  ('CONSTANT -> cst_whole','CONSTANT',1,'p_CONSTANT','parser.py',97),
  ('CONSTANT -> cst_decimal','CONSTANT',1,'p_CONSTANT','parser.py',98),
  ('CONSTANT -> cst_words','CONSTANT',1,'p_CONSTANT','parser.py',99),
  ('CONSTANT -> cst_boolean','CONSTANT',1,'p_CONSTANT','parser.py',100),
  ('CONSTANT_AUX -> squarebracket_open EXPRESSION squarebracket_close','CONSTANT_AUX',3,'p_CONSTANT_AUX','parser.py',105),
  ('CONSTANT_AUX -> parenthesis_open EXPRESSION CONSTANT_AUX1 parenthesis_close','CONSTANT_AUX',4,'p_CONSTANT_AUX','parser.py',106),
  ('CONSTANT_AUX -> empty','CONSTANT_AUX',1,'p_CONSTANT_AUX','parser.py',107),
  ('CONSTANT_AUX1 -> comma EXPRESSION CONSTANT_AUX1','CONSTANT_AUX1',3,'p_CONSTANT_AUX1','parser.py',112),
  ('CONSTANT_AUX1 -> empty','CONSTANT_AUX1',1,'p_CONSTANT_AUX1','parser.py',113),
  ('DECLARATIONS -> VAR_DECLARATION','DECLARATIONS',1,'p_DECLARATIONS','parser.py',118),
  ('DECLARATIONS -> LIST_DECLARATION','DECLARATIONS',1,'p_DECLARATIONS','parser.py',119),
  ('VAR_DECLARATION -> variable id VAR_DECLARATION_AUX of_type TYPE semicolon','VAR_DECLARATION',6,'p_VAR_DECLARATION','parser.py',124),
  ('VAR_DECLARATION_AUX -> comma id VAR_DECLARATION_AUX','VAR_DECLARATION_AUX',3,'p_VAR_DECLARATION_AUX','parser.py',129),
  ('VAR_DECLARATION_AUX -> empty','VAR_DECLARATION_AUX',1,'p_VAR_DECLARATION_AUX','parser.py',130),
  ('LIST_DECLARATION -> variable id squarebracket_open EXPRESSION squarebracket_close of_type TYPE semicolon','LIST_DECLARATION',8,'p_LIST_DECLARATION','parser.py',135),
  ('EXPRESSION -> EXPRESSION_AUX EXP EXPRESSION_AUX1','EXPRESSION',3,'p_EXPRESSION','parser.py',140),
  ('EXPRESSION_AUX -> op_negation','EXPRESSION_AUX',1,'p_EXPRESSION_AUX','parser.py',145),
  ('EXPRESSION_AUX -> empty','EXPRESSION_AUX',1,'p_EXPRESSION_AUX','parser.py',146),
  ('EXPRESSION_AUX1 -> op_and EXPRESSION_AUX EXP','EXPRESSION_AUX1',3,'p_EXPRESSION_AUX1','parser.py',151),
  ('EXPRESSION_AUX1 -> op_or EXPRESSION_AUX EXP','EXPRESSION_AUX1',3,'p_EXPRESSION_AUX1','parser.py',152),
  ('EXP -> ITEM EXP_AUX','EXP',2,'p_EXP','parser.py',157),
  ('EXP_AUX -> op_less ITEM','EXP_AUX',2,'p_EXP_AUX','parser.py',162),
  ('EXP_AUX -> op_less_equal ITEM','EXP_AUX',2,'p_EXP_AUX','parser.py',163),
  ('EXP_AUX -> op_greater ITEM','EXP_AUX',2,'p_EXP_AUX','parser.py',164),
  ('EXP_AUX -> op_greater_equal ITEM','EXP_AUX',2,'p_EXP_AUX','parser.py',165),
  ('EXP_AUX -> op_equal ITEM','EXP_AUX',2,'p_EXP_AUX','parser.py',166),
  ('EXP_AUX -> op_not_equal ITEM','EXP_AUX',2,'p_EXP_AUX','parser.py',167),
  ('EXP_AUX -> empty','EXP_AUX',1,'p_EXP_AUX','parser.py',168),
  ('FACTOR -> parenthesis_open EXPRESSION parenthesis_close','FACTOR',3,'p_FACTOR','parser.py',173),
  ('FACTOR -> FACTOR_AUX','FACTOR',1,'p_FACTOR','parser.py',174),
  ('FACTOR_AUX -> op_addition CONSTANT','FACTOR_AUX',2,'p_FACTOR_AUX','parser.py',179),
  ('FACTOR_AUX -> op_subtraction CONSTANT','FACTOR_AUX',2,'p_FACTOR_AUX','parser.py',180),
  ('FACTOR_AUX -> CONSTANT','FACTOR_AUX',1,'p_FACTOR_AUX','parser.py',181),
  ('ITEM -> TERM ITEM_AUX','ITEM',2,'p_ITEM','parser.py',186),
  ('ITEM_AUX -> op_addition ITEM','ITEM_AUX',2,'p_ITEM_AUX','parser.py',191),
  ('ITEM_AUX -> op_subtraction ITEM','ITEM_AUX',2,'p_ITEM_AUX','parser.py',192),
  ('ITEM_AUX -> empty','ITEM_AUX',1,'p_ITEM_AUX','parser.py',193),
  ('TERM -> FACTOR TERM_AUX','TERM',2,'p_TERM','parser.py',198),
  ('TERM_AUX -> op_multiplication TERM','TERM_AUX',2,'p_TERM_AUX','parser.py',203),
  ('TERM_AUX -> op_division TERM','TERM_AUX',2,'p_TERM_AUX','parser.py',204),
  ('TERM_AUX -> empty','TERM_AUX',1,'p_TERM_AUX','parser.py',205),
  ('STATEMENT -> ASSIGN','STATEMENT',1,'p_STATEMENT','parser.py',210),
  ('STATEMENT -> CONDITION','STATEMENT',1,'p_STATEMENT','parser.py',211),
  ('STATEMENT -> READ','STATEMENT',1,'p_STATEMENT','parser.py',212),
  ('STATEMENT -> WRITE','STATEMENT',1,'p_STATEMENT','parser.py',213),
  ('STATEMENT -> LOOP','STATEMENT',1,'p_STATEMENT','parser.py',214),
  ('STATEMENT -> RETURN','STATEMENT',1,'p_STATEMENT','parser.py',215),
  ('STATEMENT -> CALL','STATEMENT',1,'p_STATEMENT','parser.py',216),
  ('CALL -> call id parenthesis_open EXPRESSION CALL_AUX parenthesis_close semicolon','CALL',7,'p_CALL','parser.py',221),
  ('CALL_AUX -> comma EXPRESSION CALL_AUX','CALL_AUX',3,'p_CALL_AUX','parser.py',226),
  ('CALL_AUX -> empty','CALL_AUX',1,'p_CALL_AUX','parser.py',227),
  ('LOOP -> do BODY until parenthesis_open EXPRESSION parenthesis_close','LOOP',6,'p_LOOP','parser.py',232),
  ('ASSIGN -> id ASSIGN_AUX op_assign EXPRESSION semicolon','ASSIGN',5,'p_ASSIGN','parser.py',237),
  ('ASSIGN_AUX -> squarebracket_open EXPRESSION squarebracket_close','ASSIGN_AUX',3,'p_ASSIGN_AUX','parser.py',242),
  ('RETURN -> return_statement EXPRESSION semicolon','RETURN',3,'p_RETURN','parser.py',247),
  ('READ -> input parenthesis_open id READ_AUX parenthesis_close semicolon','READ',6,'p_READ','parser.py',252),
  ('READ_AUX -> squarebracket_open EXPRESSION squarebracket_close','READ_AUX',3,'p_READ_AUX','parser.py',257),
  ('READ_AUX -> empty','READ_AUX',1,'p_READ_AUX','parser.py',258),
  ('WRITE -> print parenthesis_open EXPRESSION WRITE_AUX parenthesis_close semicolon','WRITE',6,'p_WRITE','parser.py',263),
  ('WRITE_AUX -> comma EXPRESSION WRITE_AUX','WRITE_AUX',3,'p_WRITE_AUX','parser.py',268),
  ('WRITE_AUX -> empty','WRITE_AUX',1,'p_WRITE_AUX','parser.py',269),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',273),
]
